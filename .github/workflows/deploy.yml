name: Deploy EKS Cluster

on:
  push:
    branches:
      - main

env:
  CLUSTER_NAME: hello-eks
  AWS_REGION: us-east-1
  ENVIRONMENT: dev
  TF_VERSION: 1.8.0
  HELM_VERSION: v3.14.0
  HELMFILE_VERSION: v0.155.0
  SOPS_VERSION: 3.8.1
  AGE_KEY_FILE: .sops.age.key

jobs:
  deploy:
    name: Deploy EKS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up existing nodegroups (if any)
        run: |
          echo "Checking for existing nodegroups in cluster $CLUSTER_NAME..."
          NODEGROUPS=$(aws eks list-nodegroups --cluster-name "$CLUSTER_NAME" --query "nodegroups" --output text || echo "")
          if [ -n "$NODEGROUPS" ]; then
            for NG in $NODEGROUPS; do
              echo "Deleting nodegroup: $NG"
              aws eks delete-nodegroup --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NG"
              echo "Waiting for nodegroup $NG to be deleted..."
              aws eks wait nodegroup-deleted --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NG"
            done
          else
            echo "No nodegroups found."
          fi

      - name: Setup environment variables for OIDC
        id: oidc-info
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          OIDC_ID=$(aws eks describe-cluster --name $CLUSTER_NAME --query "cluster.identity.oidc.issuer" --output text | awk -F'/' '{print $NF}')
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "oidc_id=$OIDC_ID" >> $GITHUB_OUTPUT

      - name: Import existing OIDC provider (if exists)
        working-directory: terraform/eks
        run: |
          OIDC_ARN="arn:aws:iam::${{ steps.oidc-info.outputs.account_id }}:oidc-provider/oidc.eks.${{ env.AWS_REGION }}.amazonaws.com/id/${{ steps.oidc-info.outputs.oidc_id }}"
          echo "Checking if OIDC provider $OIDC_ARN exists..."
          if aws iam get-open-id-connect-provider --open-id-connect-provider-arn $OIDC_ARN > /dev/null 2>&1; then
            echo "OIDC provider exists, importing to Terraform..."
            terraform init -upgrade
            terraform import "module.eks.module.eks.aws_iam_openid_connect_provider.oidc_provider[0]" "$OIDC_ARN" || true
          else
            echo "OIDC provider does not exist yet. Continuing."
          fi

      - name: Terraform Init
        working-directory: terraform/eks
        run: terraform init -upgrade

      - name: Terraform Apply
        working-directory: terraform/eks
        run: terraform apply -auto-approve

      - name: Install Helm & Helmfile
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          curl -L https://github.com/helmfile/helmfile/releases/download/${{ env.HELMFILE_VERSION }}/helmfile_${{ env.HELMFILE_VERSION }}_linux_amd64.tar.gz | tar xz
          sudo mv helmfile /usr/local/bin/

      - name: Helmfile Deploy
        run: |
          helmfile -e $ENVIRONMENT apply
