name: Deploy to EKS with Terraform and Helmfile

on:
  push:
    branches:
      - dev
      - stage

env:
  TF_VERSION:  1.12.2 
  AWS_REGION: us-east-1
  HELM_VERSION: v3.14.0
  HELMFILE_VERSION: v0.155.0
  SOPS_VERSION: 3.8.1
  AGE_KEY_FILE: .sops.age.key
  CLUSTER_NAME: hello-app-cluster

jobs:
  deploy:
    name: Terraform & Helmfile Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set ENVIRONMENT from branch
        run: echo "ENVIRONMENT=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/eks
        run: terraform init

      - name: Terraform Plan
        id: tfplan
        working-directory: terraform/eks
        continue-on-error: true
        run: |
          terraform plan -out=tfplan || echo "No changes to apply"

      - name: Remove existing IAM OIDC Provider if it exists
        run: |
          set -euo pipefail
          echo "Verificando existencia del OIDC Provider del cl√∫ster '$CLUSTER_NAME' en '$AWS_REGION'..."
          OIDC_URL=$(aws eks describe-cluster \
            --region "$AWS_REGION" \
            --name "$CLUSTER_NAME" \
            --query "cluster.identity.oidc.issuer" \
            --output text || echo "")
          if [[ -z "$OIDC_URL" ]]; then
            echo "‚ùå No se pudo obtener el OIDC URL del cl√∫ster  (posiblemente a√∫n no creado). Saliendo sin acci√≥n."
            exit 0
          fi
          OIDC_SUFFIX=$(echo "$OIDC_URL" | sed 's|https://||')
          EXISTING_OIDC_ARNS=$(aws iam list-open-id-connect-providers \
            --query "OpenIDConnectProviderList[].Arn" \
            --output text | grep "$OIDC_SUFFIX" || true)
          if [[ -n "$EXISTING_OIDC_ARNS" ]]; then
            echo "‚ö†Ô∏è Se encontraron OIDC Providers existentes:"
            echo "$EXISTING_OIDC_ARNS"
            for arn in $EXISTING_OIDC_ARNS; do
              echo "üîÑ Eliminando $arn ..."
              aws iam delete-open-id-connect-provider --open-id-connect-provider-arn "$arn" || echo "‚ö†Ô∏è No se pudo eliminar $arn (posiblemente ya fue eliminado)"
            done
            echo "‚úÖ Todos los OIDC Providers eliminados (si exist√≠an)."
          else
            echo "‚úÖ No hay OIDC Provider duplicado. Continuando..."
          fi
        env:
          CLUSTER_NAME: hello-app-cluster
          AWS_REGION: us-east-1

      - name: Terraform Apply Plan
        working-directory: terraform/eks
        run: |
          if [ -f tfplan ]; then
            terraform apply -auto-approve tfplan
          else
            echo "Skipping apply. No tfplan file found (no changes)."
          fi

      - name: üõ°Ô∏è Agregar IAM role de GitHub Actions al aws-auth
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          echo "Verificando acceso al cl√∫ster..."
          kubectl get nodes || true

          echo "Descargando aws-auth..."
          kubectl get configmap aws-auth -n kube-system -o yaml > aws-auth.yaml

          if grep -q "$GITHUB_ROLE_ARN" aws-auth.yaml; then
          echo "‚úÖ El rol ya est√° presente en   aws-auth"
          else
          echo "‚ûï Agregando el rol al aws-auth"
          cat <<EOF >> aws-auth.yaml
          
          data:
            mapRoles: |
              - rolearn: $GITHUB_ROLE_ARN
                username: github-actions
                groups:
                  - system:masters
              EOF
              kubectl apply -f aws-auth.yaml
              fi
        env:
          GITHUB_ROLE_ARN: arn:aws:iam::123456789012:role/github-actions-eks-role
    

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install Helm Diff plugin
        run: helm plugin install https://github.com/databus23/helm-diff

      - name: Install Helmfile
        run: |
          VERSION_CLEAN=${HELMFILE_VERSION#v}
          curl -L "https://github.com/helmfile/helmfile/releases/download/${HELMFILE_VERSION}/helmfile_${VERSION_CLEAN}_linux_amd64.tar.gz" -o helmfile.tar.gz
          tar -xzf helmfile.tar.gz
          sudo mv helmfile /usr/local/bin/

      - name: Install SOPS
        run: |
          curl -L https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64 -o sops
          chmod +x sops
          sudo mv sops /usr/local/bin/sops

      - name: Create SOPS key
        run: |
          echo "${{ secrets.SOPS_AGE_KEY }}" > $AGE_KEY_FILE
          export SOPS_AGE_KEY_FILE=$AGE_KEY_FILE

      - name: Decrypt secrets
        run: |
          export SOPS_AGE_KEY_FILE=$AGE_KEY_FILE
          sops -d secrets/${{ env.ENVIRONMENT }}-secrets.yaml > secrets.dec.yaml

      - name: Configurar acceso a EKS
        run: aws eks update-kubeconfig --region "$AWS_REGION" --name "$CLUSTER_NAME"
        env:
          AWS_REGION: us-east-1
          CLUSTER_NAME: hello-app-cluster

      - name: Esperar que el cluster EKS est√© disponible
        run: |
          echo "‚è≥ Esperando a que el cl√∫ster est√© listo...."
          for i in {1..2}; do
            if kubectl get nodes &>/dev/null; then
              echo "‚úÖ Cl√∫ster EKS ya  disponible."
              break
            fi
            echo "Esperando 10 segundos...  intento $i/2"
            sleep 10
          done
          if ! kubectl get nodes &>/dev/null; then
            echo "‚ùå Error: el cl√∫ster no est√° accesible tras esperar."
            exit 1
          fi

      - name: Deploy with Helmfile
        run: |
          export SOPS_AGE_KEY_FILE=$AGE_KEY_FILE
          helmfile -e $ENVIRONMENT apply
